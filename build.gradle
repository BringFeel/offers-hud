plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
}

archivesBaseName = project.archives_base_name
version = project.mod_version+'+'+stonecutter.current.version
group = project.maven_group

def javaInt = stonecutter.eval(stonecutter.current.version, ">=1.20.5")
        ? 21 : 17

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    mavenCentral()
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${stonecutter.current.project}"
    mappings "net.fabricmc:yarn:${property('yarn_mappings')}:v2"
    modImplementation "net.fabricmc:fabric-loader:${property('loader_version')}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${property('fabric_version')}"

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.
    modImplementation("com.terraformersmc:modmenu:${property('modmenu_version')}")  {
        exclude module: 'fabric-api'
    }
    modApi("me.shedaniel.cloth:cloth-config-fabric:${property('cloth_config_version')}") {
        exclude module: 'fabric-api'
    }
}

processResources {
    def mcDepVersion = project.minecraft_deps
    inputs.property "version", version
    inputs.property "mc_dep_version", mcDepVersion
    inputs.property "java_version", javaInt

    def vars =[
            "version": version,
            "mc_dep_version": mcDepVersion,
            "java_version": javaInt
    ];
    filesMatching("fabric.mod.json") {
        expand(vars)
    }

    filesMatching("offershud.mixins.json") {
        expand(vars)
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = javaInt
}

loom {
    runConfigs.all {
        ideConfigGenerated true // Run configurations are not created for subprojects by default
        runDir "../../run" // Use a shared run folder and create separate worlds
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
    def javaObj = stonecutter.eval(stonecutter.current.version, ">=1.20.5")
            ? JavaVersion.VERSION_21 : JavaVersion.VERSION_17

    sourceCompatibility = javaObj
    targetCompatibility = javaObj
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies
    }
}

task printSourceSets {
    doLast {
        sourceSets.each { set ->
            println("SourceSet '${set.name}':")
            println("  Java sources: ${set.java.srcDirs}")
            println("  Resources: ${set.resources.srcDirs}")
        }
    }
}
